{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","height","mass","hairColor","skinColor","eyeColor","birthYear","gender","className","CardList","actors","map","user","i","key","hair_color","skin_color","eye_color","birth_year","Scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fetch","then","response","json","users","results","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAqBeA,EAlBF,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,KAAKC,EAAgE,EAAhEA,OAAOC,EAAyD,EAAzDA,KAAKC,EAAoD,EAApDA,UAAUC,EAA0C,EAA1CA,UAAUC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,UAAUC,EAAa,EAAbA,OACpE,OACI,yBAAKC,UAAU,yDAEX,6BACI,qCAAWR,GACX,sCAAYC,GACZ,oCAAUC,GACV,0CAAgBC,GAChB,0CAAgBC,GAChB,yCAAeC,GACf,0CAAgBC,GAChB,sCAAYC,MCYbE,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLb,KAAMU,EAAOG,GAAGb,KAChBC,OAAQS,EAAOG,GAAGZ,OAClBC,KAAMQ,EAAOG,GAAGX,KAChBC,UAAWO,EAAOG,GAAGE,WACrBX,UAAWM,EAAOG,GAAGG,WACrBX,SAAUK,EAAOG,GAAGI,UACpBX,UAAWI,EAAOG,GAAGK,WACrBX,OAAQG,EAAOG,GAAGN,cCP/BY,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBtB,OAAQ,UAChEmB,EAAMI,WCgBJC,E,YAnBX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KACDM,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,uDAEJG,KAAKV,MAAMI,a,GAhBCQ,aCuCZC,G,kBAjCX,aAAe,IAAD,8BACV,+CACKP,MAAQ,CACThB,OAAQ,IAHF,E,iFAOM,IAAD,OACfwB,MAAM,+BACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKP,SAAS,CAACrB,OAAO4B,EAAMC,e,+BAMtC,IACC7B,EAAUoB,KAAKJ,MAAfhB,OACP,OAAQA,EAAO8B,OAGP,yBAAKhC,UAAU,MACX,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUE,OAAQA,OANtC,2C,GApBUsB,c,MCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.250c3e0b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ name,height,mass,hairColor,skinColor,eyeColor,birthYear,gender }) => {\r\n    return (\r\n        <div className='tl bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        \r\n            <div>\r\n                <h4>Name: {name}</h4>\r\n                <p>Height: {height}</p>\r\n                <p>Mass: {mass}</p>\r\n                <p>Hair Color: {hairColor}</p>\r\n                <p>Skin Color: {skinColor}</p>\r\n                <p>Eye Color: {eyeColor}</p>\r\n                <p>Birth Year: {birthYear}</p>\r\n                <p>Gender: {gender}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({actors}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                actors.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            name={actors[i].name} \r\n                            height={actors[i].height}\r\n                            mass={actors[i].mass}\r\n                            hairColor={actors[i].hair_color}\r\n                            skinColor={actors[i].skin_color}\r\n                            eyeColor={actors[i].eye_color}\r\n                            birthYear={actors[i].birth_year}\r\n                            gender={actors[i].gender}   \r\n                        />\r\n                    );\r\n                })\r\n            }   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false \r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            actors: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://swapi.co/api/people')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({actors:users.results})})\r\n        \r\n       \r\n    }\r\n\r\n   \r\n    render() {\r\n        const {actors} = this.state\r\n        return !actors.length ?\r\n        <h1>Loading</h1>:\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Star Wars Character</h1>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList actors={actors}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div> \r\n            );\r\n        }\r\n    }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}